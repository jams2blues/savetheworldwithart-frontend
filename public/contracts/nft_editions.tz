parameter (or (or (or (address %add_child) (address %add_parent)) (or (pair %balance_of (list %requests (pair (address %owner) (nat %token_id))) (contract %callback (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))))) (pair %burn (nat %token_id) (nat %amount)))) (or (or (pair %mint (address %to_) (pair (nat %amount) (map %metadata string bytes))) (address %remove_child)) (or (address %remove_parent) (or (list %transfer (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) (list %update_operators (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id)))))))));
storage   (pair (pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                # == add_child ==
                # sp.verify(sp.sender == self.data.admin, 'Only the contract owner can add children') # @parameter%add_child : @storage
                DUP 2;      # @storage : @parameter%add_child : @storage
                CAR;        # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : @parameter%add_child : @storage
                CAR;        # pair (address %admin) (set %children address) : @parameter%add_child : @storage
                CAR;        # address : @parameter%add_child : @storage
                SENDER;     # @sender : address : @parameter%add_child : @storage
                COMPARE;    # int : @parameter%add_child : @storage
                EQ;         # bool : @parameter%add_child : @storage
                IF
                  {}
                  {
                    PUSH string "Only the contract owner can add children"; # string : @parameter%add_child : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%add_child : @storage
                SWAP;       # @storage : @parameter%add_child
                # self.data.children.add(params) # @storage : @parameter%add_child
                UNPAIR;     # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%add_child
                UNPAIR;     # pair (address %admin) (set %children address) : pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%add_child
                UNPAIR;     # address : set address : pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%add_child
                SWAP;       # set address : address : pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%add_child
                PUSH bool True; # bool : set address : address : pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%add_child
                DIG 5;      # @parameter%add_child : bool : set address : address : pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                UPDATE;     # set address : address : pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                SWAP;       # address : set address : pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                PAIR;       # pair address (set address) : pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                PAIR;       # pair (pair address (set address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                PAIR;       # pair (pair (pair address (set address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
              }
              {
                # == add_parent ==
                # sp.verify(sp.sender == self.data.admin, 'Only the contract owner can add parents') # @parameter%add_parent : @storage
                DUP 2;      # @storage : @parameter%add_parent : @storage
                CAR;        # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : @parameter%add_parent : @storage
                CAR;        # pair (address %admin) (set %children address) : @parameter%add_parent : @storage
                CAR;        # address : @parameter%add_parent : @storage
                SENDER;     # @sender : address : @parameter%add_parent : @storage
                COMPARE;    # int : @parameter%add_parent : @storage
                EQ;         # bool : @parameter%add_parent : @storage
                IF
                  {}
                  {
                    PUSH string "Only the contract owner can add parents"; # string : @parameter%add_parent : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%add_parent : @storage
                SWAP;       # @storage : @parameter%add_parent
                # self.data.parents.add(params) # @storage : @parameter%add_parent
                UNPAIR;     # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%add_parent
                SWAP;       # pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : @parameter%add_parent
                UNPAIR;     # pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address) : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : @parameter%add_parent
                UNPAIR;     # big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : @parameter%add_parent
                SWAP;       # set address : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : @parameter%add_parent
                PUSH bool True; # bool : set address : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : @parameter%add_parent
                DIG 5;      # @parameter%add_parent : bool : set address : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))
                UPDATE;     # set address : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))
                SWAP;       # big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))
                PAIR;       # pair (big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set address) : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))
                PAIR;       # pair (pair (big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))
                SWAP;       # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                PAIR;       # pair (pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
              }; # pair (pair (pair address (set address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
            NIL operation; # list operation : pair (pair (pair address (set address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
          }
          {
            IF_LEFT
              {
                # == balance_of ==
                # sp.verify(~ self.data.paused, 'FA2_PAUSED') # @parameter%balance_of : @storage
                DUP 2;      # @storage : @parameter%balance_of : @storage
                GET 5;      # bool : @parameter%balance_of : @storage
                IF
                  {
                    PUSH string "FA2_PAUSED"; # string : @parameter%balance_of : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @parameter%balance_of : @storage
                # responses = sp.local("responses", sp.list([])) # @parameter%balance_of : @storage
                NIL (pair (pair address nat) nat); # list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                # for req in params.requests: ... # list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                DUP 2;      # @parameter%balance_of : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                CAR;        # list (pair (address %owner) (nat %token_id)) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                ITER
                  {
                    # sp.verify(self.data.token_metadata.contains(req.token_id), 'FA2_TOKEN_UNDEFINED') # pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                    DUP 4;      # @storage : pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                    GET 7;      # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                    DUP 2;      # pair (address %owner) (nat %token_id) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                    CDR;        # nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                    MEM;        # bool : pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                    IF
                      {}
                      {
                        PUSH string "FA2_TOKEN_UNDEFINED"; # string : pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                        FAILWITH;   # FAILED
                      }; # pair (address %owner) (nat %token_id) : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                    SWAP;       # list (pair (pair address nat) nat) : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                    # if self.data.ledger.contains((req.owner, req.token_id)):
                    # responses.value.push(sp.record(balance = 0, request = req)) # list (pair (pair address nat) nat) : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                    PUSH nat 0; # nat : list (pair (pair address nat) nat) : pair (address %owner) (nat %token_id) : @parameter%balance_of : @storage
                    DIG 2;      # pair (address %owner) (nat %token_id) : nat : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                    PAIR;       # pair (pair (address %owner) (nat %token_id)) nat : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                    CONS;       # list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                  }; # list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                # sp.transfer(responses.value, sp.tez(0), params.callback) # list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                NIL operation; # list operation : list (pair (pair address nat) nat) : @parameter%balance_of : @storage
                DIG 2;      # @parameter%balance_of : list operation : list (pair (pair address nat) nat) : @storage
                CDR;        # contract (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))) : list operation : list (pair (pair address nat) nat) : @storage
                PUSH mutez 0; # mutez : contract (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))) : list operation : list (pair (pair address nat) nat) : @storage
                DIG 3;      # list (pair (pair address nat) nat) : mutez : contract (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))) : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
              }
              {
                # == burn ==
                # sp.verify(params.token_id < self.data.next_token_id, 'FA2_TOKEN_UNDEFINED') # @parameter%burn : @storage
                DUP 2;      # @storage : @parameter%burn : @storage
                CAR;        # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : @parameter%burn : @storage
                GET 6;      # nat : @parameter%burn : @storage
                DUP 2;      # @parameter%burn : nat : @parameter%burn : @storage
                CAR;        # nat : nat : @parameter%burn : @storage
                COMPARE;    # int : @parameter%burn : @storage
                LT;         # bool : @parameter%burn : @storage
                IF
                  {}
                  {
                    PUSH string "FA2_TOKEN_UNDEFINED"; # string : @parameter%burn : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%burn : @storage
                # sp.verify(self.data.ledger.contains((sp.sender, params.token_id)), 'FA2_NOT_OWNER') # @parameter%burn : @storage
                DUP 2;      # @storage : @parameter%burn : @storage
                CAR;        # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : @parameter%burn : @storage
                GET 3;      # big_map (pair address nat) nat : @parameter%burn : @storage
                DUP 2;      # @parameter%burn : big_map (pair address nat) nat : @parameter%burn : @storage
                CAR;        # nat : big_map (pair address nat) nat : @parameter%burn : @storage
                SENDER;     # @sender : nat : big_map (pair address nat) nat : @parameter%burn : @storage
                PAIR;       # pair @sender nat : big_map (pair address nat) nat : @parameter%burn : @storage
                MEM;        # bool : @parameter%burn : @storage
                IF
                  {}
                  {
                    PUSH string "FA2_NOT_OWNER"; # string : @parameter%burn : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%burn : @storage
                # sp.verify(self.data.ledger[(sp.sender, params.token_id)].balance >= params.amount, 'FA2_INSUFFICIENT_BALANCE') # @parameter%burn : @storage
                DUP;        # @parameter%burn : @parameter%burn : @storage
                CDR;        # nat : @parameter%burn : @storage
                DUP 3;      # @storage : nat : @parameter%burn : @storage
                CAR;        # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : nat : @parameter%burn : @storage
                GET 3;      # big_map (pair address nat) nat : nat : @parameter%burn : @storage
                DUP 3;      # @parameter%burn : big_map (pair address nat) nat : nat : @parameter%burn : @storage
                CAR;        # nat : big_map (pair address nat) nat : nat : @parameter%burn : @storage
                SENDER;     # @sender : nat : big_map (pair address nat) nat : nat : @parameter%burn : @storage
                PAIR;       # pair @sender nat : big_map (pair address nat) nat : nat : @parameter%burn : @storage
                GET;        # option nat : nat : @parameter%burn : @storage
                IF_NONE
                  {
                    PUSH int 287; # int : nat : @parameter%burn : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : @parameter%burn : @storage
                COMPARE;    # int : @parameter%burn : @storage
                GE;         # bool : @parameter%burn : @storage
                IF
                  {}
                  {
                    PUSH string "FA2_INSUFFICIENT_BALANCE"; # string : @parameter%burn : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%burn : @storage
                # self.data.ledger[(sp.sender, params.token_id)].balance = sp.as_nat(self.data.ledger[(sp.sender, params.token_id)].balance - params.amount) # @parameter%burn : @storage
                DUP;        # @parameter%burn : @parameter%burn : @storage
                CDR;        # nat : @parameter%burn : @storage
                DUP 3;      # @storage : nat : @parameter%burn : @storage
                CAR;        # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : nat : @parameter%burn : @storage
                GET 3;      # big_map (pair address nat) nat : nat : @parameter%burn : @storage
                DUP 3;      # @parameter%burn : big_map (pair address nat) nat : nat : @parameter%burn : @storage
                CAR;        # nat : big_map (pair address nat) nat : nat : @parameter%burn : @storage
                SENDER;     # @sender : nat : big_map (pair address nat) nat : nat : @parameter%burn : @storage
                PAIR;       # pair @sender nat : big_map (pair address nat) nat : nat : @parameter%burn : @storage
                GET;        # option nat : nat : @parameter%burn : @storage
                IF_NONE
                  {
                    PUSH int 289; # int : nat : @parameter%burn : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : @parameter%burn : @storage
                SUB;        # int : @parameter%burn : @storage
                ISNAT;      # option nat : @parameter%burn : @storage
                IF_NONE
                  {
                    PUSH int 289; # int : @parameter%burn : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%burn : @storage
                DIG 2;      # @storage : @some : @parameter%burn
                UNPAIR;     # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : @parameter%burn
                UNPAIR;     # pair (address %admin) (set %children address) : pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : @parameter%burn
                SWAP;       # pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : @parameter%burn
                UNPAIR;     # big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : @parameter%burn
                DUP;        # big_map (pair address nat) nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : @parameter%burn
                DUP 7;      # @parameter%burn : big_map (pair address nat) nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : @parameter%burn
                CAR;        # nat : big_map (pair address nat) nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : @parameter%burn
                SENDER;     # @sender : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : @parameter%burn
                PAIR;       # pair @sender nat : big_map (pair address nat) nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : @parameter%burn
                DUP;        # pair @sender nat : pair @sender nat : big_map (pair address nat) nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : @parameter%burn
                DUG 2;      # pair @sender nat : big_map (pair address nat) nat : pair @sender nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : @parameter%burn
                GET;        # option nat : pair @sender nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : @parameter%burn
                IF_NONE
                  {
                    PUSH int 289; # int : pair @sender nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : @parameter%burn
                    FAILWITH;   # FAILED
                  }
                  {
                    DROP;       # pair @sender nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : @parameter%burn
                  }; # pair @sender nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : @parameter%burn
                DIG 5;      # @some : pair @sender nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%burn
                SOME;       # option nat : pair @sender nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%burn
                SWAP;       # pair @sender nat : option nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%burn
                UPDATE;     # big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%burn
                PAIR;       # pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%burn
                SWAP;       # pair (address %admin) (set %children address) : pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%burn
                PAIR;       # pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%burn
                PAIR;       # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn
                SWAP;       # @parameter%burn : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                # self.data.total_supply[params.token_id] = sp.as_nat(self.data.total_supply[params.token_id] - params.amount) # @parameter%burn : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                DUP 2;      # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                DUP;        # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                GET 8;      # big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                DUP 3;      # @parameter%burn : big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                CDR;        # nat : big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                DIG 4;      # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : nat : big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn
                GET 8;      # big_map nat nat : nat : big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn
                DUP 5;      # @parameter%burn : big_map nat nat : nat : big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn
                CAR;        # nat : big_map nat nat : nat : big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn
                GET;        # option nat : nat : big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn
                IF_NONE
                  {
                    PUSH int 291; # int : nat : big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn
                SUB;        # int : big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn
                ISNAT;      # option nat : big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn
                IF_NONE
                  {
                    PUSH int 291; # int : big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn
                SOME;       # option nat : big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn
                DUP 4;      # @parameter%burn : option nat : big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn
                CAR;        # nat : option nat : big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn
                UPDATE;     # big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn
                UPDATE 8;   # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn
                SWAP;       # @parameter%burn : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                # if self.data.ledger[(sp.sender, params.token_id)].balance == 0: # @parameter%burn : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                PUSH nat 0; # nat : @parameter%burn : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                DUP 3;      # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : nat : @parameter%burn : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                CAR;        # pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : nat : @parameter%burn : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                GET 3;      # big_map (pair address nat) nat : nat : @parameter%burn : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                DUP 3;      # @parameter%burn : big_map (pair address nat) nat : nat : @parameter%burn : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                CAR;        # nat : big_map (pair address nat) nat : nat : @parameter%burn : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                SENDER;     # @sender : nat : big_map (pair address nat) nat : nat : @parameter%burn : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                PAIR;       # pair @sender nat : big_map (pair address nat) nat : nat : @parameter%burn : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                GET;        # option nat : nat : @parameter%burn : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                IF_NONE
                  {
                    PUSH int 293; # int : nat : @parameter%burn : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : @parameter%burn : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                COMPARE;    # int : @parameter%burn : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                EQ;         # bool : @parameter%burn : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                IF
                  {
                    SWAP;       # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn
                    # del self.data.ledger[(sp.sender, params.token_id)] # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%burn
                    UNPAIR;     # pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%burn
                    UNPAIR;     # pair (address %admin) (set %children address) : pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%burn
                    SWAP;       # pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%burn
                    UNPAIR;     # big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%burn
                    NONE nat;   # option nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%burn
                    DIG 5;      # @parameter%burn : option nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                    CAR;        # nat : option nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                    SENDER;     # @sender : nat : option nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                    PAIR;       # pair @sender nat : option nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                    UPDATE;     # big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                    PAIR;       # pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                    SWAP;       # pair (address %admin) (set %children address) : pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                    PAIR;       # pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                    PAIR;       # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                  }
                  {
                    DROP;       # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                  }; # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                NIL operation; # list operation : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
              }; # list operation : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
          }; # list operation : pair (pair (pair address (set address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                # == mint ==
                # sp.verify(sp.sender == self.data.admin, 'Not authorized') # @parameter%mint : @storage
                DUP 2;      # @storage : @parameter%mint : @storage
                CAR;        # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : @parameter%mint : @storage
                CAR;        # pair (address %admin) (set %children address) : @parameter%mint : @storage
                CAR;        # address : @parameter%mint : @storage
                SENDER;     # @sender : address : @parameter%mint : @storage
                COMPARE;    # int : @parameter%mint : @storage
                EQ;         # bool : @parameter%mint : @storage
                IF
                  {}
                  {
                    PUSH string "Not authorized"; # string : @parameter%mint : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%mint : @storage
                # self.data.token_metadata[self.data.next_token_id] = sp.record(token_id = self.data.next_token_id, token_info = params.metadata) # @parameter%mint : @storage
                DUP 2;      # @storage : @parameter%mint : @storage
                DUP;        # @storage : @storage : @parameter%mint : @storage
                GET 7;      # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : @storage : @parameter%mint : @storage
                DUP 3;      # @parameter%mint : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : @storage : @parameter%mint : @storage
                GET 4;      # map string bytes : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : @storage : @parameter%mint : @storage
                DUP 5;      # @storage : map string bytes : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : @storage : @parameter%mint : @storage
                CAR;        # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : map string bytes : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : @storage : @parameter%mint : @storage
                GET 6;      # nat : map string bytes : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : @storage : @parameter%mint : @storage
                PAIR;       # pair nat (map string bytes) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : @storage : @parameter%mint : @storage
                SOME;       # option (pair nat (map string bytes)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : @storage : @parameter%mint : @storage
                DIG 4;      # @storage : option (pair nat (map string bytes)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : @storage : @parameter%mint
                CAR;        # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : option (pair nat (map string bytes)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : @storage : @parameter%mint
                GET 6;      # nat : option (pair nat (map string bytes)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : @storage : @parameter%mint
                UPDATE;     # big_map nat (pair nat (map string bytes)) : @storage : @parameter%mint
                UPDATE 7;   # @storage : @parameter%mint
                SWAP;       # @parameter%mint : @storage
                # self.data.ledger[(params.to_, self.data.next_token_id)] = sp.record(balance = params.amount) # @parameter%mint : @storage
                DUP 2;      # @storage : @parameter%mint : @storage
                UNPAIR;     # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%mint : @storage
                UNPAIR;     # pair (address %admin) (set %children address) : pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%mint : @storage
                SWAP;       # pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%mint : @storage
                UNPAIR;     # big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%mint : @storage
                DUP 5;      # @parameter%mint : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%mint : @storage
                GET 3;      # nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%mint : @storage
                SOME;       # option nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%mint : @storage
                DIG 6;      # @storage : option nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%mint
                CAR;        # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : option nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%mint
                GET 6;      # nat : option nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%mint
                DUP 7;      # @parameter%mint : nat : option nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%mint
                CAR;        # address : nat : option nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%mint
                PAIR;       # pair address nat : option nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%mint
                UPDATE;     # big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%mint
                PAIR;       # pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%mint
                SWAP;       # pair (address %admin) (set %children address) : pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%mint
                PAIR;       # pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%mint
                PAIR;       # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%mint
                SWAP;       # @parameter%mint : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                # self.data.total_supply[self.data.next_token_id] = params.amount # @parameter%mint : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                DUP 2;      # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%mint : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                DUP;        # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%mint : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                GET 8;      # big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : @parameter%mint : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                DIG 2;      # @parameter%mint : big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                GET 3;      # nat : big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                SOME;       # option nat : big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                DIG 3;      # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : option nat : big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                CAR;        # pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : option nat : big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                GET 6;      # nat : option nat : big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                UPDATE;     # big_map nat nat : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                UPDATE 8;   # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                # self.data.next_token_id += 1 # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                UNPAIR;     # pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                UNPAIR;     # pair (address %admin) (set %children address) : pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                SWAP;       # pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                UNPAIR;     # big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                SWAP;       # pair (big_map %metadata string bytes) (nat %next_token_id) : big_map (pair address nat) nat : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                UNPAIR;     # big_map string bytes : nat : big_map (pair address nat) nat : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                SWAP;       # nat : big_map string bytes : big_map (pair address nat) nat : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                PUSH nat 1; # nat : nat : big_map string bytes : big_map (pair address nat) nat : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                ADD;        # nat : big_map string bytes : big_map (pair address nat) nat : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                SWAP;       # big_map string bytes : nat : big_map (pair address nat) nat : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                PAIR;       # pair (big_map string bytes) nat : big_map (pair address nat) nat : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                SWAP;       # big_map (pair address nat) nat : pair (big_map string bytes) nat : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                PAIR;       # pair (big_map (pair address nat) nat) (pair (big_map string bytes) nat) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                SWAP;       # pair (address %admin) (set %children address) : pair (big_map (pair address nat) nat) (pair (big_map string bytes) nat) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                PAIR;       # pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map string bytes) nat)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                PAIR;       # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map string bytes) nat))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
              }
              {
                # == remove_child ==
                # sp.verify(sp.sender == self.data.admin, 'Only the contract owner can remove children') # @parameter%remove_child : @storage
                DUP 2;      # @storage : @parameter%remove_child : @storage
                CAR;        # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : @parameter%remove_child : @storage
                CAR;        # pair (address %admin) (set %children address) : @parameter%remove_child : @storage
                CAR;        # address : @parameter%remove_child : @storage
                SENDER;     # @sender : address : @parameter%remove_child : @storage
                COMPARE;    # int : @parameter%remove_child : @storage
                EQ;         # bool : @parameter%remove_child : @storage
                IF
                  {}
                  {
                    PUSH string "Only the contract owner can remove children"; # string : @parameter%remove_child : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%remove_child : @storage
                SWAP;       # @storage : @parameter%remove_child
                # self.data.children.remove(params) # @storage : @parameter%remove_child
                UNPAIR;     # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%remove_child
                UNPAIR;     # pair (address %admin) (set %children address) : pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%remove_child
                UNPAIR;     # address : set address : pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%remove_child
                SWAP;       # set address : address : pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%remove_child
                PUSH bool False; # bool : set address : address : pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%remove_child
                DIG 5;      # @parameter%remove_child : bool : set address : address : pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                UPDATE;     # set address : address : pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                SWAP;       # address : set address : pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                PAIR;       # pair address (set address) : pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                PAIR;       # pair (pair address (set address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                PAIR;       # pair (pair (pair address (set address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
              }; # pair (pair (pair address (set address)) (pair (big_map (pair address nat) nat) (pair (big_map string bytes) nat))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
          }
          {
            IF_LEFT
              {
                # == remove_parent ==
                # sp.verify(sp.sender == self.data.admin, 'Only the contract owner can remove parents') # @parameter%remove_parent : @storage
                DUP 2;      # @storage : @parameter%remove_parent : @storage
                CAR;        # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : @parameter%remove_parent : @storage
                CAR;        # pair (address %admin) (set %children address) : @parameter%remove_parent : @storage
                CAR;        # address : @parameter%remove_parent : @storage
                SENDER;     # @sender : address : @parameter%remove_parent : @storage
                COMPARE;    # int : @parameter%remove_parent : @storage
                EQ;         # bool : @parameter%remove_parent : @storage
                IF
                  {}
                  {
                    PUSH string "Only the contract owner can remove parents"; # string : @parameter%remove_parent : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%remove_parent : @storage
                SWAP;       # @storage : @parameter%remove_parent
                # self.data.parents.remove(params) # @storage : @parameter%remove_parent
                UNPAIR;     # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @parameter%remove_parent
                SWAP;       # pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : @parameter%remove_parent
                UNPAIR;     # pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address) : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : @parameter%remove_parent
                UNPAIR;     # big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : @parameter%remove_parent
                SWAP;       # set address : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : @parameter%remove_parent
                PUSH bool False; # bool : set address : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : @parameter%remove_parent
                DIG 5;      # @parameter%remove_parent : bool : set address : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))
                UPDATE;     # set address : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))
                SWAP;       # big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))
                PAIR;       # pair (big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set address) : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))
                PAIR;       # pair (pair (big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))
                SWAP;       # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))
                PAIR;       # pair (pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
              }
              {
                IF_LEFT
                  {
                    # == transfer ==
                    # sp.verify(~ self.data.paused, 'FA2_PAUSED') # @parameter%transfer : @storage
                    DUP 2;      # @storage : @parameter%transfer : @storage
                    GET 5;      # bool : @parameter%transfer : @storage
                    IF
                      {
                        PUSH string "FA2_PAUSED"; # string : @parameter%transfer : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @parameter%transfer : @storage
                    # for transfer in params: ... # @parameter%transfer : @storage
                    DUP;        # @parameter%transfer : @parameter%transfer : @storage
                    ITER
                      {
                        # for tx in transfer.txs: ... # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        DUP;        # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        CDR;        # list (pair (address %to_) (pair (nat %token_id) (nat %amount))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        ITER
                          {
                            # sp.verify(((transfer.from_ == sp.sender) | (sp.sender == self.data.admin)) | (self.data.operators.contains(sp.set_type_expr(sp.record(operator = sp.sender, owner = transfer.from_, token_id = tx.token_id), sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id")))))), 'FA2_NOT_OPERATOR') # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                            SENDER;     # @sender : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                            DUP 3;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @sender : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                            CAR;        # address : @sender : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                            COMPARE;    # int : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                            EQ;         # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                            IF
                              {
                                PUSH bool True; # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                              }
                              {
                                DUP 4;      # @storage : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                                CAR;        # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                                CAR;        # pair (address %admin) (set %children address) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                                CAR;        # address : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                                SENDER;     # @sender : address : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                                COMPARE;    # int : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                                EQ;         # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                              }; # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            IF
                              {
                                PUSH bool True; # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                              }
                              {
                                DUP 4;      # @storage : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                GET 3;      # pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                CAR;        # big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                DUP 2;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                GET 3;      # nat : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                SENDER;     # @sender : nat : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                DUP 5;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @sender : nat : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                CAR;        # address : @sender : nat : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                PAIR 3;     # pair address (pair @sender nat) : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                MEM;        # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                              }; # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            IF
                              {}
                              {
                                PUSH string "FA2_NOT_OPERATOR"; # string : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                FAILWITH;   # FAILED
                              }; # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            # sp.verify(self.data.token_metadata.contains(tx.token_id), 'FA2_TOKEN_UNDEFINED') # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            DUP 4;      # @storage : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            GET 7;      # big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            DUP 2;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            GET 3;      # nat : big_map nat (pair (nat %token_id) (map %token_info string bytes)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            MEM;        # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            IF
                              {}
                              {
                                PUSH string "FA2_TOKEN_UNDEFINED"; # string : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                FAILWITH;   # FAILED
                              }; # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            # if tx.amount > 0: # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            PUSH nat 0; # nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            DUP 2;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            GET 4;      # nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            COMPARE;    # int : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            GT;         # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                            IF
                              {
                                # sp.verify((self.data.ledger.contains((transfer.from_, tx.token_id))) & (self.data.ledger[(transfer.from_, tx.token_id)].balance >= tx.amount), 'FA2_INSUFFICIENT_BALANCE') # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                DUP 4;      # @storage : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                CAR;        # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                GET 3;      # big_map (pair address nat) nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                DUP 2;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                GET 3;      # nat : big_map (pair address nat) nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                DUP 4;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : nat : big_map (pair address nat) nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                CAR;        # address : nat : big_map (pair address nat) nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                PAIR;       # pair address nat : big_map (pair address nat) nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                MEM;        # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                IF
                                  {
                                    DUP;        # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                    GET 4;      # nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                    DUP 5;      # @storage : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                    CAR;        # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                    GET 3;      # big_map (pair address nat) nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                    DUP 3;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                    GET 3;      # nat : big_map (pair address nat) nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                    DUP 5;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : nat : big_map (pair address nat) nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                    CAR;        # address : nat : big_map (pair address nat) nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                    PAIR;       # pair address nat : big_map (pair address nat) nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                    GET;        # option nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                    IF_NONE
                                      {
                                        PUSH int 197; # int : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                        FAILWITH;   # FAILED
                                      }
                                      {}; # @some : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                    COMPARE;    # int : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                    GE;         # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                  }
                                  {
                                    PUSH bool False; # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                  }; # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                IF
                                  {}
                                  {
                                    PUSH string "FA2_INSUFFICIENT_BALANCE"; # string : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                    FAILWITH;   # FAILED
                                  }; # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                # self.data.ledger[(transfer.from_, tx.token_id)].balance = sp.as_nat(self.data.ledger[(transfer.from_, tx.token_id)].balance - tx.amount) # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                DUP;        # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                GET 4;      # nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                DUP 5;      # @storage : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                CAR;        # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                GET 3;      # big_map (pair address nat) nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                DUP 3;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                GET 3;      # nat : big_map (pair address nat) nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                DUP 5;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : nat : big_map (pair address nat) nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                CAR;        # address : nat : big_map (pair address nat) nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                PAIR;       # pair address nat : big_map (pair address nat) nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                GET;        # option nat : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                IF_NONE
                                  {
                                    PUSH int 202; # int : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                    FAILWITH;   # FAILED
                                  }
                                  {}; # @some : nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                SUB;        # int : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                ISNAT;      # option nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                IF_NONE
                                  {
                                    PUSH int 202; # int : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                    FAILWITH;   # FAILED
                                  }
                                  {}; # @some : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                                DIG 4;      # @storage : @some : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                UNPAIR;     # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                UNPAIR;     # pair (address %admin) (set %children address) : pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                SWAP;       # pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                UNPAIR;     # big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                DUP;        # big_map (pair address nat) nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                DUP 7;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                GET 3;      # nat : big_map (pair address nat) nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                DUP 9;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                CAR;        # address : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                PAIR;       # pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                DUP;        # pair address nat : pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                DUG 2;      # pair address nat : big_map (pair address nat) nat : pair address nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                GET;        # option nat : pair address nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                IF_NONE
                                  {
                                    PUSH int 202; # int : pair address nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    FAILWITH;   # FAILED
                                  }
                                  {
                                    DROP;       # pair address nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                  }; # pair address nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : @some : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                DIG 5;      # @some : pair address nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                SOME;       # option nat : pair address nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                SWAP;       # pair address nat : option nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                UPDATE;     # big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                PAIR;       # pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                SWAP;       # pair (address %admin) (set %children address) : pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                PAIR;       # pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                PAIR;       # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                DUG 3;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                                # if self.data.ledger.contains((tx.to_, tx.token_id)): # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                                DUP 4;      # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                                CAR;        # pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                                GET 3;      # big_map (pair address nat) nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                                DUP 2;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                                GET 3;      # nat : big_map (pair address nat) nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                                DUP 3;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : nat : big_map (pair address nat) nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                                CAR;        # address : nat : big_map (pair address nat) nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                                PAIR;       # pair address nat : big_map (pair address nat) nat : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                                MEM;        # bool : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                                IF
                                  {
                                    # self.data.ledger[(tx.to_, tx.token_id)].balance += tx.amount # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                                    DIG 3;      # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    UNPAIR;     # pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    UNPAIR;     # pair (address %admin) (set %children address) : pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    SWAP;       # pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    UNPAIR;     # big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    DUP;        # big_map (pair address nat) nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    DUP 6;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    GET 3;      # nat : big_map (pair address nat) nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    DUP 7;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    CAR;        # address : nat : big_map (pair address nat) nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    PAIR;       # pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    DUP;        # pair address nat : pair address nat : big_map (pair address nat) nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    DUG 2;      # pair address nat : big_map (pair address nat) nat : pair address nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    GET;        # option nat : pair address nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    IF_NONE
                                      {
                                        PUSH int 206; # int : pair address nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                        FAILWITH;   # FAILED
                                      }
                                      {}; # @some : pair address nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    DIG 6;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : @some : pair address nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    GET 4;      # nat : @some : pair address nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    ADD;        # nat : pair address nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    SOME;       # option nat : pair address nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    SWAP;       # pair address nat : option nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    UPDATE;     # big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    PAIR;       # pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    SWAP;       # pair (address %admin) (set %children address) : pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    PAIR;       # pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    PAIR;       # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    DUG 2;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                                  }
                                  {
                                    # self.data.ledger[(tx.to_, tx.token_id)] = sp.record(balance = tx.amount) # pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                                    DIG 3;      # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    UNPAIR;     # pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    UNPAIR;     # pair (address %admin) (set %children address) : pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    SWAP;       # pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    UNPAIR;     # big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    DUP 5;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    GET 4;      # nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    SOME;       # option nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    DUP 6;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : option nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    GET 3;      # nat : option nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %to_) (pair (nat %token_id) (nat %amount)) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    DIG 6;      # pair (address %to_) (pair (nat %token_id) (nat %amount)) : nat : option nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    CAR;        # address : nat : option nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    PAIR;       # pair address nat : option nat : big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    UPDATE;     # big_map (pair address nat) nat : pair (big_map %metadata string bytes) (nat %next_token_id) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    PAIR;       # pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (address %admin) (set %children address) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    SWAP;       # pair (address %admin) (set %children address) : pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    PAIR;       # pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    PAIR;       # pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))
                                    DUG 2;      # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                                  }; # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                              }
                              {
                                DROP;       # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : @storage
                              }; # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                          }; # pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))) : @parameter%transfer : @storage
                        DROP;       # @parameter%transfer : @storage
                      }; # @parameter%transfer : @storage
                    DROP;       # @storage
                  }
                  {
                    # == update_operators ==
                    # for update in params: ... # @parameter%update_operators : @storage
                    DUP;        # @parameter%update_operators : @parameter%update_operators : @storage
                    ITER
                      {
                        # with update.match_cases(...): # or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))) : @parameter%update_operators : @storage
                        IF_LEFT
                          {
                            # sp.verify((add_operator.owner == sp.sender) | (sp.sender == self.data.admin), 'FA2_NOT_ADMIN_OR_OPERATOR') # pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                            SENDER;     # @sender : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                            DUP 2;      # pair (address %operator) (pair (address %owner) (nat %token_id)) : @sender : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                            GET 3;      # address : @sender : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                            COMPARE;    # int : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                            EQ;         # bool : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                            IF
                              {
                                PUSH bool True; # bool : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                              }
                              {
                                DUP 3;      # @storage : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                                CAR;        # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                                CAR;        # pair (address %admin) (set %children address) : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                                CAR;        # address : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                                SENDER;     # @sender : address : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                                COMPARE;    # int : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                                EQ;         # bool : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                              }; # bool : pair (address %operator) (pair (address %owner) (nat %token_id)) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id)))) : @storage
                            IF
                              {}
                              {
                                PUSH string "FA2_NOT_ADMIN_OR_OPERATOR"; # string : pair (address %operator) (pair (address %owner) (nat %token_id)) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id)))) : @storage
                                FAILWITH;   # FAILED
                              }; # pair (address %operator) (pair (address %owner) (nat %token_id)) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id)))) : @storage
                            # self.data.operators[sp.set_type_expr(sp.record(operator = add_operator.operator, owner = add_operator.owner, token_id = add_operator.token_id), sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id"))))] = sp.unit # pair (address %operator) (pair (address %owner) (nat %token_id)) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id)))) : @storage
                            DIG 2;      # @storage : pair (address %operator) (pair (address %owner) (nat %token_id)) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            UNPAIR;     # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %operator) (pair (address %owner) (nat %token_id)) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            SWAP;       # pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (address %operator) (pair (address %owner) (nat %token_id)) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            UNPAIR;     # pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address) : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (address %operator) (pair (address %owner) (nat %token_id)) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            UNPAIR;     # big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (address %operator) (pair (address %owner) (nat %token_id)) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            PUSH (option unit) (Some Unit); # option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (address %operator) (pair (address %owner) (nat %token_id)) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            DIG 5;      # pair (address %operator) (pair (address %owner) (nat %token_id)) : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            DUP;        # pair (address %operator) (pair (address %owner) (nat %token_id)) : pair (address %operator) (pair (address %owner) (nat %token_id)) : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            GET 4;      # nat : pair (address %operator) (pair (address %owner) (nat %token_id)) : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            SWAP;       # pair (address %operator) (pair (address %owner) (nat %token_id)) : nat : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            DUP;        # pair (address %operator) (pair (address %owner) (nat %token_id)) : pair (address %operator) (pair (address %owner) (nat %token_id)) : nat : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            CAR;        # address : pair (address %operator) (pair (address %owner) (nat %token_id)) : nat : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            SWAP;       # pair (address %operator) (pair (address %owner) (nat %token_id)) : address : nat : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            GET 3;      # address : address : nat : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            PAIR 3;     # pair address (pair address nat) : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            UPDATE;     # big_map (pair address (pair address nat)) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            PAIR;       # pair (big_map (pair address (pair address nat)) unit) (set address) : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            PAIR;       # pair (pair (big_map (pair address (pair address nat)) unit) (set address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            SWAP;       # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map (pair address (pair address nat)) unit) (set address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            PAIR;       # pair (pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map (pair address (pair address nat)) unit) (set address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            SWAP;       # list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id)))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map (pair address (pair address nat)) unit) (set address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                          }
                          {
                            # sp.verify((remove_operator.owner == sp.sender) | (sp.sender == self.data.admin), 'FA2_NOT_ADMIN_OR_OPERATOR') # pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                            SENDER;     # @sender : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                            DUP 2;      # pair (address %operator) (pair (address %owner) (nat %token_id)) : @sender : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                            GET 3;      # address : @sender : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                            COMPARE;    # int : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                            EQ;         # bool : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                            IF
                              {
                                PUSH bool True; # bool : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                              }
                              {
                                DUP 3;      # @storage : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                                CAR;        # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                                CAR;        # pair (address %admin) (set %children address) : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                                CAR;        # address : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                                SENDER;     # @sender : address : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                                COMPARE;    # int : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                                EQ;         # bool : pair (address %operator) (pair (address %owner) (nat %token_id)) : @parameter%update_operators : @storage
                              }; # bool : pair (address %operator) (pair (address %owner) (nat %token_id)) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id)))) : @storage
                            IF
                              {}
                              {
                                PUSH string "FA2_NOT_ADMIN_OR_OPERATOR"; # string : pair (address %operator) (pair (address %owner) (nat %token_id)) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id)))) : @storage
                                FAILWITH;   # FAILED
                              }; # pair (address %operator) (pair (address %owner) (nat %token_id)) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id)))) : @storage
                            # del self.data.operators[sp.set_type_expr(sp.record(operator = remove_operator.operator, owner = remove_operator.owner, token_id = remove_operator.token_id), sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id"))))] # pair (address %operator) (pair (address %owner) (nat %token_id)) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id)))) : @storage
                            DIG 2;      # @storage : pair (address %operator) (pair (address %owner) (nat %token_id)) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            UNPAIR;     # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (address %operator) (pair (address %owner) (nat %token_id)) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            SWAP;       # pair (pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (address %operator) (pair (address %owner) (nat %token_id)) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            UNPAIR;     # pair (big_map %operators (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set %parents address) : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (address %operator) (pair (address %owner) (nat %token_id)) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            UNPAIR;     # big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (address %operator) (pair (address %owner) (nat %token_id)) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            NONE unit;  # option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (address %operator) (pair (address %owner) (nat %token_id)) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            DIG 5;      # pair (address %operator) (pair (address %owner) (nat %token_id)) : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            DUP;        # pair (address %operator) (pair (address %owner) (nat %token_id)) : pair (address %operator) (pair (address %owner) (nat %token_id)) : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            GET 4;      # nat : pair (address %operator) (pair (address %owner) (nat %token_id)) : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            SWAP;       # pair (address %operator) (pair (address %owner) (nat %token_id)) : nat : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            DUP;        # pair (address %operator) (pair (address %owner) (nat %token_id)) : pair (address %operator) (pair (address %owner) (nat %token_id)) : nat : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            CAR;        # address : pair (address %operator) (pair (address %owner) (nat %token_id)) : nat : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            SWAP;       # pair (address %operator) (pair (address %owner) (nat %token_id)) : address : nat : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            GET 3;      # address : address : nat : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            PAIR 3;     # pair address (pair address nat) : option unit : big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            UPDATE;     # big_map (pair address (pair address nat)) unit : set address : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            PAIR;       # pair (big_map (pair address (pair address nat)) unit) (set address) : pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            PAIR;       # pair (pair (big_map (pair address (pair address nat)) unit) (set address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            SWAP;       # pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id))) : pair (pair (big_map (pair address (pair address nat)) unit) (set address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            PAIR;       # pair (pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map (pair address (pair address nat)) unit) (set address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))) : list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id))))
                            SWAP;       # list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id)))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map (pair address (pair address nat)) unit) (set address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                          }; # list (or (pair %add_operator (address %operator) (pair (address %owner) (nat %token_id))) (pair %remove_operator (address %operator) (pair (address %owner) (nat %token_id)))) : pair (pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map (pair address (pair address nat)) unit) (set address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
                      }; # @parameter%update_operators : @storage
                    DROP;       # @storage
                  }; # @storage
              }; # pair (pair (pair (address %admin) (set %children address)) (pair (big_map %ledger (pair address nat) nat) (pair (big_map %metadata string bytes) (nat %next_token_id)))) (pair (pair (big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
          }; # pair (pair (pair address (set address)) (pair (big_map (pair address nat) nat) (pair (big_map string bytes) nat))) (pair (pair (big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
        NIL operation; # list operation : pair (pair (pair address (set address)) (pair (big_map (pair address nat) nat) (pair (big_map string bytes) nat))) (pair (pair (big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
      }; # list operation : pair (pair (pair address (set address)) (pair (big_map (pair address nat) nat) (pair (big_map string bytes) nat))) (pair (pair (big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat))))
    PAIR;       # pair (list operation) (pair (pair (pair address (set address)) (pair (big_map (pair address nat) nat) (pair (big_map string bytes) nat))) (pair (pair (big_map (pair (address %owner) (pair (address %operator) (nat %token_id))) unit) (set address)) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (big_map %total_supply nat nat)))))
  };